#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app/app');
let debug = require('debug')('sednor-chat-server:server');
let http = require('http');
let sockjs = require('sockjs');

let config = require('../app/config/index');
let wsAuthMiddleware = require('../app/middlewares/wsAuth');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3001');

app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? `Pipe ${ port}`
    : `Port ${ port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${ bind } requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${ bind } is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? `pipe ${ addr }`
    : `port ${ addr.port }`;

  debug(`Listening on ${ bind }`);
}

/**
 * WS connection
 */

let io = require('socket.io')(server);

let chatNamespace = io.of(`${config.wsPrefix}${config.chatPrefix}`);

chatNamespace.use(wsAuthMiddleware);

chatNamespace.on('connection', socket => {
  let rooms = ['room1', 'room2'];
  rooms.forEach(room => socket.join(room));

  socket.on('message', data => {
    if (Object.keys(socket.rooms).includes(data.room)) {
      chatNamespace.to(data.room).emit(`Message from ${socket.user.firstName}: ${data.payload}`);
    }
  });

  socket.on('create-chat', data => {
    socket.join(data.room);
  });
});
